name: Build

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build.yml'
      - 'config/**/*'
      - 'scripts/**/*'
      - 'src/**/*'
      - 'test/**/*'
      - 'package.json'
      - 'package-lock.json'
      - 'postcss.config.js'
      - 'rollup.config.js'
      - 'tailwind.config.js'
      - 'tsconfig.json'
      - 'utils.rollup.config.js'
  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/build.yml'
      - 'config/**/*'
      - 'scripts/**/*'
      - 'src/**/*'
      - 'test/**/*'
      - 'package.json'
      - 'package-lock.json'
      - 'postcss.config.js'
      - 'rollup.config.js'
      - 'tailwind.config.js'
      - 'tsconfig.json'
      - 'utils.rollup.config.js'

jobs:
  build:
    runs-on: ${{ matrix.os.name }}
    strategy:
      # we want to run the full build on all os: don't cancel running jobs even if one fails
      fail-fast: false
      matrix:
        # syntax inspired from https://github.community/t5/GitHub-Actions/Using-a-matrix-defined-input-for-a-custom-action/m-p/32032/highlight/true#M988
        os:
          - { name: ubuntu-20.04, coverage: '-- --coverage' }
          - { name: macos-11 }
          - { name: windows-2019 }
    steps:
      - name: Checkout with shallow clone
        uses: actions/checkout@v2
        if: ${{ !contains(matrix.os.coverage, 'coverage') }}
      - name: Checkout without shallow clone
        uses: actions/checkout@v2
        if: ${{ contains(matrix.os.coverage, 'coverage') }}
        with:
          # Disabling shallow clone is recommended for improving relevancy of SonarCloud reporting
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Setup GitHub cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # playwright browsers are needed for the bundle tests, so no special configuration as in other workflows
      - name: Install dependencies
        run: npm ci
      - name: Lint check
        run: npm run lint-check
      - name: Build Application
        run: npm run build
      - name: Test Application
        id: 'test_unit'
        run: npm run test:unit ${{ matrix.os.coverage }}
      - name: Upload unit test results
        if: ${{ failure() && steps.test_unit.outcome == 'failure' }}
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-results-${{matrix.os.name}}-${{github.sha}}
          path: build/test-report/unit
      - name: Test Application Integration
        id: 'test_integration'
        run: npm run test:integration ${{ matrix.os.coverage }}
      - name: Upload integration test results
        if: ${{ failure() && steps.test_integration.outcome == 'failure' }}
        uses: actions/upload-artifact@v2
        with:
          name: integration-test-results-${{matrix.os.name}}-${{github.sha}}
          path: build/test-report/integration
      # Ensure we don't break scripts
      - name: Build utils
        run: npm run build-utils
      # Ensure we can build working bundles
      - name: Build bundles
        run: npm run build-bundles
      # install OS dependencies required by browsers on the GitHub runner
      - uses: microsoft/playwright-github-action@v1.5.0
      - name: Test bundles
        id: 'test_bundles'
        run: npm run test:bundles
      - name: Upload bundles test results
        if: ${{ failure() && steps.test_bundles.outcome == 'failure' }}
        uses: actions/upload-artifact@v2
        with:
          name: bundles-test-results-${{matrix.os.name}}-${{github.sha}}
          path: build/test-report/bundles
      - name: Check performance tests compilation
        run: npm run test:perf:compile

      # No need to run the analysis from all environments
      - name: SonarCloud Scan
        if: ${{ success() && contains(matrix.os.coverage, 'coverage') && env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarcloud-github-action@v1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
